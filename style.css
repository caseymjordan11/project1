.body{
  height: 100vh;
  /*^^(vh = view height) Often times a better way to ensure content is distributed vertically across the screen
  without having to restrict it to a static height*/
  /*Generally, you shouldn't need to restrict the width of top level containing elements
  (like body) as they will automatically expand to the of the screen. You may, however,
  want to use a `min-width` to prevent resizing in too far */
}

  /*For all class and id names, use kabob-case::after
  .game-back {

  }*/
 .gameBack {
  position: relative;
  background: linear-gradient(45deg, blue, red, green, yellow);
  width: 1000px;
  height: 1000px;
  display: flex;
  justify-content: center;
  flex-direction: column;
  visibility: hidden;
}

.scorePosition {
  display: flex;
  justify-content: center;
}

.scoreLabel {
  display: flex;
  justify-content: center;
}

.scores{
  display: flex;
  justify-content: center;
  background: lightblue;
  font-family: helvetica, sans-serif;
  padding: 10px;
  margin-bottom: 10px;
  border: solid black 4px;
}

.level {
  padding: 0px;
  margin: 5px;
  font-size: 50px;
  background: lightblue;
  font-family: helvetica, sans-serif;
  width: 300px;
  padding: 0px;
  margin-bottom: 10px;
  border: solid black 4px;
}

.levelStyle{
  display: flex;
  justify-content: center;
}

.header{
  position: fixed;
  top: 15%;
  left: 50%;
  transform: translate(-50%, -50%);
  font-size: 70px;
  font-family: helvetica, sans-serif;
  background: lightblue;
  padding: 20px 70px;
  border: solid black 4px;
}

.loseMessage {
  position: fixed;
  top: 40%;
  left: 50%;
  transform: translate(-50%, -50%);
  font-family: helvetica, sans-serif;
  background: lightblue;
  padding: 30px 30px;
  border: solid black 4px;
}

.button {
  display: flex;
  justify-content: center;
}


.game2{
  background: lightblue;
  width: 510px;
  margin-left: auto;
  margin-right: auto;
  border: solid black 4px;
  visibility: hidden;
}


/*particularly with id names, you want to be more semantic. `#button` isn't really
specific enough to describe what it does / why it is unique*/
#button {
  background-color: lightblue;
  text-shadow: -1px 1px white;
  border: solid black 4px;
  font-family: helvetica, sans-serif;
  padding: 10px 50px;
  margin-top: 10px;
  font-size: 20px;
}

.continue {
  position: fixed;
  top: 55%;
  left: 50%;
  transform: translate(-50%, -50%);
  background-color: lightblue;
  text-shadow: -1px 1px white;
  border: solid black 4px;
  font-family: helvetica, sans-serif;
  padding: 10px 50px;
  font-size: 20px;
}

.continue2 {
  position: fixed;
  top: 55%;
  left: 50%;
  transform: translate(-50%, -50%);
  background-color: lightblue;
  text-shadow: -1px 1px white;
  border: solid black 4px;
  font-family: helvetica, sans-serif;
  padding: 10px 50px;
  font-size: 20px;
}
/*Are two classes above applying the same styling? Is this repetition neccessary?*/

.winMessage {
  position: fixed;
  top: 40%;
  left: 50%;
  transform: translate(-50%, -50%);
  font-family: helvetica, sans-serif;
  background: lightblue;
  padding: 30px 30px;
  border: solid black 4px;
}

.instruc {
  position: fixed;
  top: 40%;
  left: 50%;
  transform: translate(-50%, -50%);
  font-family: helvetica, sans-serif;
  background: lightblue;
  padding: 20px 70px;
  border: solid black 4px;
}

/*^^^ Note how many of your classes apply similar styling (background, border,
  rotations, etc.). Think about how you could condense these shared styles into their
  own class that is added independently to each element that needs it. Also, consider
  looking into a CSS methodology (such as BEM) for how to compose CSS classes to make
   your code more DRY: https://css-tricks.com/bem-101/*/


.instructions {
  display: flex;
  justify-content: center;
}

.intro {
  display: flex;
  justify-content: center;
}

.highScoreEasy {
  display: flex;
  flex-direction: row;
  justify-content: center;
  margin: 0px;
  padding: 10px;
}

#easyScore {
  margin-left: 4px;
}

.highScoreMedium {
  display: flex;
  flex-direction: row;
  justify-content: center;
  margin: 0px;
  padding: 10px;
}

#mediumScore {
  margin-left: 4px;
}

.highScoreHard {
  display: flex;
  flex-direction: row;
  justify-content: center;
  margin: 0px;
  padding: 10px;
}

#hardScore {
  margin-left: 4px;
}


#blue {
  background: blue;
  opacity: .4;
  border: solid black 4px;
  width: 150px;
  height: 150px;
  margin-right: 79px;
}

#green {
  background: green;
  opacity: .4;
  border: solid black 4px;
  width: 150px;
  height: 150px;
  margin-left: 79px;
}

#red {
  background: red;
  opacity: .4;
  border: solid black 4px;
  width: 150px;
  height: 150px;
  margin: 5px;
}

#yellow {
  background: yellow;
  opacity: .4;
  border: solid black 4px;
  width: 150px;
  height: 150px;
  margin: 5px;
}

/*^^^ Definitely consider how you could refactor the above styling to condense it
into classes containing shared styles while using the ids to apply the unique styles*/

.level {
  display: flex;
  justify-content: center;
}

.difficulty {
  position: fixed;
  top: 55%;
  left: 50%;
  transform: translate(-50%, -50%);
  font-size: 20px;
  font-family: helvetica, sans-serif;
  background: lightblue;
  padding: 10px;
  border: solid black 4px;
}

.h1 {
  text-align: center;
}

.nextLevel {
  visibility: hidden;
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  background: white;
  opacity: 1;
  width: 100vh;
  height: 100vh;
  background: linear-gradient(45deg, blue, red, green, yellow);
}

.lose {
  visibility: hidden;
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  opacity: 1;
  width: 100vh;
  height: 100vh;
  background: linear-gradient(45deg, blue, red, green, yellow);
}

.game {
  visibility: hidden;
  display: flex;
  justify-content: center;
}

.start {
  position: fixed;
  top: 65%;
  left: 50%;
  transform: translate(-50%, -50%);
  background-color: lightblue;
  text-shadow: -1px 1px white;
  border: solid black 4px;
  font-family: helvetica, sans-serif;
  padding: 10px 50px;
  font-size: 20px;
}

.ry {
  visibility: hidden;
  display: flex;
  justify-content: center;
}

.startPage{
  visibility: visible;
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  background: lightblue;
  opacity: 1;
  width: 100vh;
  height: 100vh;
  background: linear-gradient(45deg, blue, red, green, yellow);
}
